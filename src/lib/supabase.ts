import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co';
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key';
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'placeholder-service-key';

// Client for browser/client-side usage
export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Admin client for server-side usage with service role
export const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
  },
});

// Database types (will be generated by Supabase CLI in production)
export interface Database {
  public: {
    Tables: {
      users: {
        Row: {
          id: string;
          email: string;
          role: 'super' | 'sme' | 'client';
          tenant_id: string | null;
          subscription_tier: 'free' | 'starter' | 'pro' | 'enterprise';
          invoice_quota_used: number;
          is_unlimited_free: boolean;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          email: string;
          role: 'super' | 'sme' | 'client';
          tenant_id?: string | null;
          subscription_tier?: 'free' | 'starter' | 'pro' | 'enterprise';
          invoice_quota_used?: number;
          is_unlimited_free?: boolean;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          email?: string;
          role?: 'super' | 'sme' | 'client';
          tenant_id?: string | null;
          subscription_tier?: 'free' | 'starter' | 'pro' | 'enterprise';
          invoice_quota_used?: number;
          is_unlimited_free?: boolean;
          created_at?: string;
          updated_at?: string;
        };
      };
      tenants: {
        Row: {
          id: string;
          business_name: string;
          sme_user_id: string;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          business_name: string;
          sme_user_id: string;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          business_name?: string;
          sme_user_id?: string;
          created_at?: string;
          updated_at?: string;
        };
      };
      invoices: {
        Row: {
          id: string;
          tenant_id: string;
          invoice_number: string;
          client_name: string;
          client_email: string | null;
          amount: number;
          currency: string;
          status: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';
          due_date: string;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          tenant_id: string;
          invoice_number: string;
          client_name: string;
          client_email?: string | null;
          amount: number;
          currency?: string;
          status?: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';
          due_date: string;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          tenant_id?: string;
          invoice_number?: string;
          client_name?: string;
          client_email?: string | null;
          amount?: number;
          currency?: string;
          status?: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';
          due_date?: string;
          created_at?: string;
          updated_at?: string;
        };
      };
    };
  };
}
